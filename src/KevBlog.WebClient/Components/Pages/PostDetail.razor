@page "/posts/{PostId:int?}"
@using KevBlog.WebClient.Services
@inject IPostService _postService;
@inject NavigationManager navManager; 
@inject MarkdownService MarkdownService


@if (_postdetailsView is not null)
{
    @if (isButtonsVisible)
    {
        <button class="btn btn-dark" @onclick="@(()=>navManager.NavigateTo($"/posts/edit/{_postdetailsView.Id}"))">Edit</button>
        <button class="btn btn-danger" @onclick="DeletePost">Delete</button>
        <ConfirmationModal Title="Confirm Delete"
                   Message="Do you want to delete this blog post?"
                   IsVisible="@_showConfirmationModal"
                   ConfirmationChanged="OnModalConfirm" />
    }

    <div class="masthead-followup mx-5 px-5 px-md-3">
    <section class="mt-2 mb-5 pb-md-4 align-items-center p-4 pb-0 pt-lg-5 rounded-3 border shadow-lg">
            <h2 class="px-5 mt-4">@_postdetailsView.Title</h2>
            <Entry>@((MarkupString)htmlContent)</Entry>
    </section>
    </div>

}
else
{
    <p>Loading data...</p>
}



@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public int? PostId { get; set; }

    private PostDisplayDetailsDto _postdetailsView = new PostDisplayDetailsDto();

    private string htmlContent;
    private bool isButtonsVisible = false;
    private bool _showConfirmationModal = true;


    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {

            var authState = await authenticationState;
            var user = authState?.User;
            var name = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

             if (user?.Identity is not null && user.Identity.IsAuthenticated)
                isButtonsVisible = true;
        }

        var result = await _postService.GetPostDetails(PostId.Value);
        htmlContent = MarkdownService.RenderMarkdown(result.Content);

        if(result is null)
        {
            navManager.NavigateTo("/", replace: true);
            return;
        }
        _postdetailsView = result;
    }

    public async Task DeletePost()
    {
        // TODO : API call for PostDelete.
    }
    private async Task OnModalConfirm(bool isConfirmed)
    {
        _showConfirmationModal = false;
        if (isConfirmed)
        {
            if (_postdetailsView != null)
            {
                // await DeletePost(_postdetailsView);
            }
        }
    }
}
