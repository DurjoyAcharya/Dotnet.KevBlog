@page "/posts/{PostId:int?}"
@using KevBlog.WebClient.Services
@inject IPostService _postService;
@inject NavigationManager navManager; 
@inject MarkdownService MarkdownService


@if (_postdetailsView is not null)
{
    @if (isButtonsVisible)
    {
        <button>Testing button</button>
    }

    <div class="masthead-followup mx-5 px-5 px-md-3">
    <section class="mt-2 mb-5 pb-md-4 align-items-center p-4 pb-0 pt-lg-5 rounded-3 border shadow-lg">
            <h2 class="px-5 mt-4">@_postdetailsView.Title</h2>
            <Entry>@((MarkupString)htmlContent)</Entry>
    </section>
    </div>
@* 

    <div class="container">
        <div class="jumbotron jumbotron-fluid mb-3 pl-0 pt-0 pb-0 bg-white position-relative">
            <PageTitle>@_postdetailsView.Title</PageTitle>

            <div class="h-100 tofront">
                <div class="row justify-content-between">
                    <div class="col-md-6 pt-6 pb-6 pr-6 align-self-center">
                        <p class="text-uppercase font-weight-bold">
                                <a>@_postdetailsView.Type</a>
                        </p>
                        <h1 class="display-4 secondfont mb-3 font-weight-bold">@_postdetailsView.Title</h1>
                        <p class="mb-3">
                            @((MarkupString)htmlContent)
                        </p>
                        <div class="d-flex align-items-center">
                            <small class="ml-2">
                                @_postdetailsView.UserName <span class="text-muted d-block">@_postdetailsView.Created</span>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div> *@
}
else
{
    <p>Loading data...</p>
}



@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public int? PostId { get; set; }

    private PostDisplayDetailsDto _postdetailsView = new PostDisplayDetailsDto();

    private string htmlContent;
    private bool isButtonsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
                isButtonsVisible = true;
        }

        var result = await _postService.GetPostDetails(PostId.Value);
        htmlContent = MarkdownService.RenderMarkdown(result.Content);

        if(result is null)
        {
            navManager.NavigateTo("/", replace: true);
            return;
        }
        _postdetailsView = result;
    }

}
